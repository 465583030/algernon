#!/usr/bin/env python
#
# small script for go fmt + vet + lint + build + run
#
# supply "b" for building, "r" for using -race or "br"/"rb" for both.
#
# example: ./run b
# example: ./run q
#

from __future__ import print_function
import glob
import os
import sys

algernon_args = ["-e"] # dev mode, using regular HTTP

def run(msg, cmd):
    """Given a message and a command, run the command and output info."""
    print(msg.capitalize() + "...", end="")
    sys.stdout.flush()
    if 0 == os.system(cmd):
        print("ok")
    else:
        print("failed")

def main():
    """Perform various checks and then run Algernon"""
    build = False
    race = False
    if len(sys.argv) > 1:
        build = "b" in sys.argv[1]
        race = "r" in sys.argv[1]
    run("formatting", "go fmt *.go")
    run("vetting", "go vet *.go")
    run("linting", "golint *.go")
    if build:
        if race:
            run("building", "go build -race")
        else:
            run("building", "go build")
        args = ["algernon"] + algernon_args
    else:
        files = glob.glob("*.go")
        ignore = []
        for fn in files:
            if fn.endswith("_test.go"):
                ignore.append(fn)
            elif fn.endswith("_unix.go"):
                ignore.append(fn.split("_unix.go")[0] + ".go")
        filelist = [fn for fn in files if fn not in ignore]
        if race:
            args = ["go", "run", "-race"] + filelist + algernon_args
        else:
            args = ["go", "run"] + filelist + algernon_args
    print(" ".join(args))
    if build:
        os.execvp("algernon", args)
    else:
        os.execvp("go", args)

if __name__ == "__main__":
    main()
